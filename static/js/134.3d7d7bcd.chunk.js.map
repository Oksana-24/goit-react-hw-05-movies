{"version":3,"file":"static/js/134.3d7d7bcd.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import React from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  const ImageUrl = '//image.tmdb.org/t/p/w500';\n  return (\n    <ul>\n      {movies.map(({ id, poster_path, title, name }) => (\n        <li key={id}>\n          <NavLink to={`/movie/${id}`} state={{ from: location }}>\n            <img src={ImageUrl + poster_path} alt={title} width={280} />\n            <h3>{title ?? name}</h3>\n          </NavLink>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n\nMovieList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import { Loader } from 'components/Loader/Loader';\nimport MovieList from 'components/MovieList/MovieList';\nimport Notiflix from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearch } from 'services/api';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [queryName, setQueryName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [movies, setMovies] = useState([]);\n  const [noFilms, setNoFilms] = useState(false);\n\n  const searchTitle = searchParams.get('query');\n\n  useEffect(() => {\n    const movieTrending = async () => {\n      if (!searchTitle) {\n        return;\n      }\n      setLoading(true);\n      try {\n        const movie = await getSearch(searchTitle);\n        setMovies(movie);\n        if (movie.length === 0) {\n          setNoFilms(true);\n        } else {\n          setNoFilms(false);\n        }\n      } catch (error) {\n        console.log('error');\n      } finally {\n        setLoading(false);\n      }\n    };\n    movieTrending();\n  }, [searchTitle]);\n\n  const handleChange = event => {\n    setQueryName(event.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (queryName.trim() === '') {\n      Notiflix.Notify.failure(`Please enter a name`);\n      return;\n    }\n    onSubmit(queryName);\n    setQueryName('');\n  };\n\n  const onSubmit = name => {\n    if (searchTitle === name) {\n      Notiflix.Notify.info(\n        `Your request \"${name}\" has already been completed! :-)`\n      );\n      return;\n    }\n    setQueryName(name);\n    setSearchParams({ query: queryName });\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Search images and photos\"\n          value={queryName}\n          onChange={handleChange}\n        />\n\n        <button type=\"submit\">\n          <span>Search</span>\n        </button>\n      </form>\n      {loading && <Loader />}\n      {noFilms && <div>Films not found </div>}\n      {movies.length > 0 && (\n        <main>\n          <MovieList movies={movies} />\n        </main>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '76462d3bd6c0e95720113bcbaeb46aaa';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport async function getTrending() {\n  const { data } = await axios.get(`/trending/all/day`);\n  // console.log(data.results);\n  return data.results;\n}\n\nexport async function getMovie(id) {\n  const { data } = await axios.get(`/movie/${id}&language=en-US`);\n  // console.log(data);\n  return data;\n}\n\nexport async function getCredits(id) {\n  const { data } = await axios.get(`/movie/${id}/credits?language=en-US`);\n  // console.log(data);\n  return data.cast;\n}\n\nexport async function getReviews(id) {\n  const { data } = await axios.get(\n    `/movie/${id}/reviews?language=en-US&page=1`\n  );\n  // console.log(data.results);\n  return data.results;\n}\n\nexport async function getSearch(queryName) {\n  const { data } = await axios.get(`/search/movie?query=${queryName}&page=1`);\n  // console.log(data.results);\n  return data.results;\n}\n"],"names":["movies","location","useLocation","map","id","poster_path","title","name","to","state","from","src","alt","width","useSearchParams","searchParams","setSearchParams","useState","queryName","setQueryName","loading","setLoading","setMovies","noFilms","setNoFilms","searchTitle","get","useEffect","movieTrending","getSearch","movie","length","console","log","onSubmit","query","Notiflix","event","preventDefault","trim","type","placeholder","value","onChange","currentTarget","toLowerCase","getTrending","axios","data","results","getMovie","getCredits","cast","getReviews","api_key"],"sourceRoot":""}